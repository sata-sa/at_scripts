#!/bin/bash

DEFAULT_ADMIN_USERNAME=weblogic

OPERATIONS_LOGFILE=$HOME/var/log/operations.`hostname`.`date +%Y%m%d`.log
CENTRALIZED_LOGFILE=$HOME/var/log/operations.`hostname`.log

WLS_BASE=/weblogic
HTTPD_CONFBASE=/conf
VIRTUALHOSTDATA_BASEDIR=/data

#########################
### Logging functions ###
#########################
log()
{
  if [ "XZ${SSH_CLIENT}" == "XZ" ]; then
    CALLER="Empty ssh client information"
  else
    CALLER=${SSH_CLIENT}
  fi

  if [ ! -z $SSH_TTY ]; then
    echo -e "[`date +%Y/%m/%d:%H:%M:%S`] [$TRANSACTION] $*"
  fi

  echo -e "[`date +%Y/%m/%d:%H:%M:%S`] [$TRANSACTION] $* [$0] [${CALLER}]" >> $OPERATIONS_LOGFILE
  echo -e "[`date +%Y/%m/%d:%H:%M:%S`] [$TRANSACTION] $* [$0] [${CALLER}]" >> $CENTRALIZED_LOGFILE
}

info()
{
  log ["\E[0;32m\033[1m"I"\033[0m"] ["\E[0;32m\033[1m"$*"\033[0m"]
}

warning()
{
  log ["\E[0;34m\033[1m"W"\033[0m"] ["\E[0;34m\033[1m"$*"\033[0m"]
}

error()
{
  log ["\E[0;31m\033[1m"E"\033[0m"] ["\E[0;31m\033[1m"$*"\033[0m"]
}

success()
{
  log \[S\] \[$*\]
  if [ ! -z $LOCKFILE ]; then
  if [ -f $LOCKFILE ]; then
    if rm $LOCKFILE
    then
      echo Removed lockfile $LOCKFILE
    else
      echo Failed to remove lockfile $LOCKFILE
    fi
  fi
  fi
}

failure()
{
  log ["\E[0;31m\033[1m"F"\033[0m"] ["\E[0;31m\033[1m"$*"\033[0m"]
  #usage
  exit 1
}

############################################
### Domain related information functions ###
############################################
check_env()
{
  if [ -z "$1" ]; then
    failure Must specify environment \(PRD/QUA/DEV\)
  else
    ENV=`echo $1 | tr [A-Z] [a-z]`

    if [ "${ENV}" != "prd" ]; then
      if [ "${ENV}" != "qua" ]; then
        if [ "${ENV}" != "dev" ]; then
          failure Unrecognized environment ${ENV}
        fi
      fi
    fi
  fi
}

list_all_domains()
{
  if [ -z $1 ]; then
    find $WLS_BASE -maxdepth 1 -mindepth 1 -type d -name "*.*" | sed s\|${WLS_BASE}/\|\|g | sort
  elif [ `echo $1 | tr [A-Z] [a-z]` = "prd" ]; then
    find $WLS_BASE -maxdepth 1 -mindepth 1 -type d -name "*.prd" | sed s\|${WLS_BASE}/\|\|g | sort
  elif [ `echo $1 | tr [A-Z] [a-z]` = "qua" ]; then
    find $WLS_BASE -maxdepth 1 -mindepth 1 -type d -name "*.qua" | sed s\|${WLS_BASE}/\|\|g | sort
  elif [ `echo $1 | tr [A-Z] [a-z]` = "dev" ]; then
    find $WLS_BASE -maxdepth 1 -mindepth 1 -type d -name "*.dev" | sed s\|${WLS_BASE}/\|\|g | sort
  fi
}

# List all servers from domains
list_all_servers()
{
  check_env $1
  DOMAIN=$2

  if [ -z ${DOMAIN} ]; then
    LIST=`list_all_domains ${ENV}`
  else
    LIST="${DOMAIN}.${ENV}"
  fi

  for domain in $LIST; do
    ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2`
    WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
    CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
    CONFIG_FILE="/var/tmp/${domain}.config.xml"
    WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

    echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

    if [ ${WLVERSION} == "8" ]; then
      get_wls_object_list.pl ${CONFIG_FILE} server -v8
    else
      get_wls_object_list.pl ${CONFIG_FILE} server
    fi

    rm -rf ${CONFIG_FILE}
  done
}

# List all clusters from all domains
list_all_clusters()
{
  check_env $1
  DOMAIN=$2

  if [ -z ${DOMAIN} ]; then
    LIST=`list_all_domains ${ENV}`
  else
    LIST="${DOMAIN}.${ENV}"
  fi

  for domain in $LIST; do
    ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2`
    WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
    CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
    CONFIG_FILE="/var/tmp/${domain}.config.xml"
    WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

    echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

    if [ ${WLVERSION} == "8" ]; then
      get_wls_object_list.pl ${CONFIG_FILE} cluster -v8
    else 
      get_wls_object_list.pl ${CONFIG_FILE} cluster
    fi

    rm -rf ${CONFIG_FILE}
  done
}

# List all servers belonging to a cluster
list_all_cluster_servers()
{
  check_env $1
  CLUSTER=$2

  if [ -z ${CLUSTER} ]; then
    return 1
  else
    if [ -z ${DOMAIN} ]; then
      LIST=`list_all_domains ${ENV}`
    else
      LIST="${DOMAIN}.${ENV}"
    fi

    for domain in $LIST; do
      if cluster_exists $ENV `echo ${domain} | cut -d. -f 1` $CLUSTER
      then
        ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2`
        WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
        CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
        CONFIG_FILE="/var/tmp/${domain}.config.xml"
        WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

        echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

        if [ ${WLVERSION} == "8" ]; then
          get_wls_object_list.pl ${CONFIG_FILE} cluster -members -v8 | grep -w ${CLUSTER} | cut -d: -f 2
        else
          get_wls_object_list.pl ${CONFIG_FILE} cluster -members | grep -w ${CLUSTER} | cut -d: -f 2
        fi

        rm -rf ${CONFIG_FILE}
      fi
    done
  fi
}

# Lists all clusters including their members
list_all_clusters_with_members()
{
  check_env $1
  DOMAIN=$2

  if [ -z ${DOMAIN} ]; then
    LIST=`list_all_domains ${ENV}`
  else
    LIST="${DOMAIN}.${ENV}"
  fi

  for domain in $LIST; do
    ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2`
    WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
    CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
    CONFIG_FILE="/var/tmp/${domain}.config.xml"
    WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

    echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

    if [ ${WLVERSION} == "8" ]; then
      get_wls_object_list.pl ${CONFIG_FILE} cluster -members -v8
    else
      get_wls_object_list.pl ${CONFIG_FILE} cluster -members
    fi

    rm -rf ${CONFIG_FILE}
  done
}

# Lists all servers with respective clusters clusters and machines
list_all_servers_with_clusters_and_machines()
{
  check_env $1
  DOMAIN=$2

  if [ -z ${DOMAIN} ]; then
    LIST=`list_all_domains ${ENV}`
  else
    LIST="${DOMAIN}.${ENV}"
  fi

  for domain in $LIST; do
    ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2`
    WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
    CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
    CONFIG_FILE="/var/tmp/${domain}.config.xml"
    WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

    echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

    if [ ${WLVERSION} == "8" ]; then
      get_wls_object_list.pl ${CONFIG_FILE} all -members -v8
    else
      get_wls_object_list.pl ${CONFIG_FILE} all -members
    fi

    rm -rf ${CONFIG_FILE}
  done
}

# List all virtualhosts
list_all_virtualhosts()
{
  check_env $1

  if [ ${ENV} == "prd" ]; then
    find $VIRTUALHOSTDATA_BASEDIR -maxdepth 1 -type d -name "*.ritta.local" -printf "%f\n" | grep -v "dev." | grep -v "qua."
  elif [ ${ENV} == "qua" ]; then
    find $VIRTUALHOSTDATA_BASEDIR -maxdepth 1 -type d -name "*.ritta.local" -printf "%f\n" | grep "qua."
  elif [ ${ENV} == "dev" ]; then
    find $VIRTUALHOSTDATA_BASEDIR -maxdepth 1 -type d -name "*.ritta.local" -printf "%f\n" | grep "dev."
  fi
}

list_all_applications()
{
  check_env $1
  VIRTUAL_HOST=$2

  if [ -z ${VIRTUAL_HOST} ]; then
    if [ ${ENV} == "prd" ]; then
      find $VIRTUALHOSTDATA_BASEDIR/*/applications -maxdepth 1 -mindepth 1 -type d | grep -v "dev." | grep -v "qua." | cut -d\/ -f 5
    elif [ ${ENV} == "qua" ]; then
      find $VIRTUALHOSTDATA_BASEDIR/*/applications -maxdepth 1 -mindepth 1 -type d | grep "qua." | cut -d\/ -f 5
    elif [ ${ENV} == "dev" ]; then
      find $VIRTUALHOSTDATA_BASEDIR/*/applications -maxdepth 1 -mindepth 1 -type d | grep "dev." | cut -d\/ -f 5
    fi
  else
    if [ ! `virtualhost_exists ${ENV} ${VIRTUAL_HOST}` ]; then
      find $VIRTUALHOSTDATA_BASEDIR/$VIRTUAL_HOST/applications -maxdepth 1 -mindepth 1 -type d | cut -d\/ -f 5
    fi
  fi
}

# List all targets associated with an applications
list_all_application_targets()
{
  VIRTUAL_HOST=$1
  APPLICATION=$2

  if [ -z ${VIRTUAL_HOST} ]; then
    return 1
  elif [ -z ${APPLICATION} ]; then
    return 2
  else
    targets_file=${VIRTUALHOSTDATA_BASEDIR}/${VIRTUAL_HOST}/applications/${APPLICATION}/.targets

    if [ -f $targets_file ]; then
      cat $targets_file
      return 0
    fi

    return 3
  fi
}

# Lists all the applications associated with a target
list_all_target_applications()
{
  TARGET=$1
  VIRTUAL_HOST=$2

  if [ -z $TARGET ]; then
    return 1
  elif [ -z $VIRTUAL_HOST ]; then
    VIRTUAL_HOST="*"
  fi

  for target_file in `find ${VIRTUALHOSTDATA_BASEDIR}/${VIRTUAL_HOST}/applications/*/.targets -name .targets`; do
    if grep ${TARGET} ${target_file} > /dev/null
    then
      app=`echo ${target_file} | awk -F\/ {'print $5'}`
      APPLICATIONS="${APPLICATIONS} $app"
    fi
  done
  echo $APPLICATIONS
  return 0
}

virtualhost_exists()
{
  check_env $1

  if [ -z $2 ]; then
    return 1
  else
    VHOST=`list_all_virtualhosts ${ENV} | grep -x $2`

    if [ -z ${VHOST} ]; then
      return 1
    else
      return 0
    fi
  fi
}

# Check if domain exists
domain_exists()
{
  check_env $1
  DOMAIN=$2

  if [ -z "${DOMAIN}" ]; then
    return 1
  fi
  if [ "XZ${DOMAIN}" != "XZ" ]; then
    if [ -d "${WLS_BASE}/${DOMAIN}.${ENV}" ]; then
      return 0
    fi
  fi
  return 1
}

# Check if server exists
server_exists()
{
  check_env $1
  DOMAIN=$2
  SERVER=$3

  if [ -z ${SERVER} ]; then
    return 1
  else
    ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2`
    WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
    CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
    CONFIG_FILE="/var/tmp/${DOMAIN}.${ENV}.config.xml"
    WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

    echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

    if [ ${WLVERSION} == "8" ]; then
      KEY=`get_wls_object_list.pl ${CONFIG_FILE} server -v8 | grep -w ${SERVER}`
    else
      KEY=`get_wls_object_list.pl ${CONFIG_FILE} server | grep -w ${SERVER}`
    fi

    rm -rf ${CONFIG_FILE}

    if [ "${SERVER}" = "${KEY}" ]; then
      return 0
    fi
  fi

  return 1
}

# Check if cluster exists
cluster_exists()
{
  check_env $1
  DOMAIN=$2
  CLUSTER=$3

  if [ -z ${CLUSTER} ]; then
    return 1
  else
    ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2`
    WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
    CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
    CONFIG_FILE="/var/tmp/${DOMAIN}.${ENV}.config.xml"
    WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

    echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

    if [ ${WLVERSION} == "8" ]; then
      KEY=`get_wls_object_list.pl ${CONFIG_FILE} cluster -v8 | grep -w ${CLUSTER}`
    else
      KEY=`get_wls_object_list.pl ${CONFIG_FILE} cluster | grep -w ${CLUSTER}`
    fi

    rm -rf ${CONFIG_FILE}

    if [ "${CLUSTER}" = "${KEY}" ]; then
      return 0
    fi
  fi

  return 1
}

application_exists()
{
  check_env $1
  APPLICATION=$2

  if [ ${ENV} == "prd" ]; then
    APP=`find $VIRTUALHOSTDATA_BASEDIR/*/applications -type d -name $APPLICATION | grep -v "dev." | grep -v "qua." | cut -d\/ -f 5`
  elif [ ${ENV} == "qua" ]; then
    APP=`find $VIRTUALHOSTDATA_BASEDIR/*/applications -type d -name $APPLICATION | grep "qua." | cut -d\/ -f 5`
  elif [ ${ENV} == "dev" ]; then
    APP=`find $VIRTUALHOSTDATA_BASEDIR/*/applications -type d -name $APPLICATION | grep "dev." | cut -d\/ -f 5`
  fi

  if [ "${APP}" != "${APPLICATION}" ]; then
    return 1
  fi

  return 0
}

get_domain_url()
{
  check_env $1
  DOMAIN=$2

  if [ -z ${DOMAIN} ]; then
    failure "Must input domain name"
  else
    ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2`
    PORT_NUMBER=`grep -w PORT_NUMBER ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2`
    echo "http://${ADMIN_SERVER}:${PORT_NUMBER}/console"
  fi
}

get_domain_config_file_path()
{
  check_env $1
  DOMAIN=$2

  if [ `grep -w WLS_VERSION ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1` -lt 9 ]; then
    grep -w DOMAIN_PATH ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2
  else
    echo `grep -w DOMAIN_PATH ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2`/config
  fi
}

# Gets a target address based on it's name
get_machine_name()
{
  check_env $1
  DOMAIN=$2
  SERVER=$3

  ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2`
  WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
  CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
  CONFIG_FILE="/var/tmp/${DOMAIN}.${ENV}.config.xml"
  WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

  echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

  if [ ${WLVERSION} == "8" ]; then
    get_wls_object_list.pl ${CONFIG_FILE} machine -members -v8 | grep -w ${SERVER} | cut -d\: -f 1
  else
    get_wls_object_list.pl ${CONFIG_FILE} machine -members | grep -w ${SERVER} | cut -d\: -f 1
  fi

  rm -rf ${CONFIG_FILE}
}

# Gets a list of machines belonging to a domain
get_domain_machine_list()
{
  check_env $1
  DOMAIN=$2

  ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2`
  WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
  CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
  CONFIG_FILE="/var/tmp/${DOMAIN}.${ENV}.config.xml"
  WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${DOMAIN}.${ENV}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

  echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

  if [ ${WLVERSION} == "8" ]; then
    get_wls_object_list.pl ${CONFIG_FILE} machine -members -v8
  else
    get_wls_object_list.pl ${CONFIG_FILE} machine -members
  fi

  rm -rf ${CONFIG_FILE}
}

# Returns the domain where the target belongs
target_domain()
{
  check_env $1
  TARGET=$2

  if [ -z $TARGET ]; then
    return 1
  else
    LIST=`list_all_domains ${ENV}`

    for domain in $LIST; do
      ADMIN_SERVER=`grep -w ADMIN_SERVER ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2`
      WLS_CONFIG_PATH=`get_domain_config_file_path ${ENV} ${DOMAIN}`
      CONFIG_XML=`ssh ${DEFAULT_ADMIN_USERNAME}@${ADMIN_SERVER} cat ${WLS_CONFIG_PATH}/config.xml`
      CONFIG_FILE="/var/tmp/${domain}.config.xml"
      WLVERSION=`grep -w WLS_VERSION ${WLS_BASE}/${domain}/domain.conf | cut -d\= -f 2 | cut -d\. -f 1`

      echo -e "${CONFIG_XML}" > ${CONFIG_FILE}

      if [ ${WLVERSION} == "8" ]; then
        OBJECT=`get_wls_object_list.pl ${CONFIG_FILE} all -v8 | grep -w ${TARGET}`
      else
        OBJECT=`get_wls_object_list.pl ${CONFIG_FILE} all | grep -w ${TARGET}`
      fi

      rm -rf ${CONFIG_FILE}

      if [ "${OBJECT}" == "${TARGET}" ]; then
        echo ${domain} | cut -d. -f 1
        return 0
      fi
    done
  fi
}

element_exists()
{
  ELEMENT=$1

  if [ -z ${ELEMENT} ]; then
    return 1
  fi

  COUNT=0

  for elem in $*; do
    if [ $COUNT -gt 0 ]; then
      if [ ${elem} == ${ELEMENT} ]; then
        return 0
      fi
    fi
    COUNT=`expr ${COUNT} + 1`
  done

  return 1
}

